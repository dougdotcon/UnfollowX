#!/usr/bin/env python3
"""
Script principal para unfollow autom√°tico usando Selenium
Contorna limita√ß√µes da API do Twitter/X
"""

import time
import logging
import os
from dotenv import load_dotenv
from twitter_selenium import TwitterSeleniumScraper
from twitter_unfollow import TwitterUnfollower

# Carregar vari√°veis de ambiente
load_dotenv()

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('twitter_unfollow_selenium.log'),
        logging.StreamHandler()
    ]
)

def choose_browser():
    """
    Permite ao usu√°rio escolher o navegador
    """
    print("\nüåê ESCOLHA DO NAVEGADOR")
    print("   Qual navegador voc√™ quer usar (deve estar logado no Twitter/X)?")
    print("   1. Chrome (padr√£o)")
    print("   2. Brave")

    choice = input("   Escolha (1 ou 2): ").strip()

    if choice == "2":
        return "brave"
    else:
        return "chrome"

def main():
    """
    Executa a sequ√™ncia autom√°tica completa usando Selenium
    """
    # Carregar credenciais da API (para unfollow e an√°lise IA)
    API_KEY = os.getenv('TWITTER_API_KEY')
    API_SECRET = os.getenv('TWITTER_API_SECRET')
    ACCESS_TOKEN = os.getenv('TWITTER_ACCESS_TOKEN')
    ACCESS_TOKEN_SECRET = os.getenv('TWITTER_ACCESS_TOKEN_SECRET')
    OPENROUTER_API_KEY = os.getenv('OPENROUTER_API_KEY')

    # Verificar credenciais da API (necess√°rias para unfollow)
    required_vars = {
        'TWITTER_API_KEY': API_KEY,
        'TWITTER_API_SECRET': API_SECRET,
        'TWITTER_ACCESS_TOKEN': ACCESS_TOKEN,
        'TWITTER_ACCESS_TOKEN_SECRET': ACCESS_TOKEN_SECRET,
        'OPENROUTER_API_KEY': OPENROUTER_API_KEY
    }

    missing_vars = [var for var, value in required_vars.items() if not value]
    if missing_vars:
        print(f"‚ùå ERRO: Vari√°veis de ambiente n√£o encontradas: {', '.join(missing_vars)}")
        print("üìù Crie um arquivo .env baseado no .env.example")
        print("üí° Mesmo usando Selenium, ainda precisamos da API para fazer unfollow")
        return

    try:
        print(f"\n{'='*70}")
        print(f"ü§ñ TWITTER/X UNFOLLOW AUTOM√ÅTICO COM SELENIUM + IA")
        print(f"{'='*70}")
        print("üöÄ SEQU√äNCIA AUTOM√ÅTICA:")
        print("   1. üåê Coletar listas via Selenium (usa navegador j√° logado)")
        print("   2. ü§ñ Analisar perfis com IA (OpenRouter)")
        print("   3. üíæ Salvar an√°lise em CSV")
        print("   4. üõ°Ô∏è Filtrar usu√°rios imunes")
        print("   5. ‚ö° Executar unfollow via API")
        print(f"{'='*70}")

        # Escolher navegador
        browser_choice = choose_browser()

        # ETAPA 1: Coletar dados via Selenium
        print(f"\nüåê ETAPA 1/5: Coletando dados via Selenium...")
        print(f"   üìã IMPORTANTE: Certifique-se de que est√° logado no Twitter/X no seu {browser_choice.title()}")

        scraper = TwitterSeleniumScraper(
            headless=False,
            use_existing_profile=True,
            browser=browser_choice
        )
        
        if not scraper.setup_driver():
            print("‚ùå Erro ao configurar navegador")
            return

        print("ÔøΩ Verificando se est√° logado no Twitter/X...")
        if not scraper.check_login_status():
            print("‚ùå N√£o est√° logado - fa√ßa login manualmente no navegador primeiro")
            print("üí° Abra o Twitter/X no seu navegador, fa√ßa login e execute o script novamente")
            scraper.close()
            return
        
        print("üìä Obtendo contagens...")
        following_count = scraper.get_following_count()
        followers_count = scraper.get_followers_count()
        
        print(f"   ‚Ä¢ Voc√™ segue: {following_count} usu√°rios")
        print(f"   ‚Ä¢ Te seguem: {followers_count} usu√°rios")
        
        # Definir limite de coleta baseado no tamanho das listas
        max_collect = min(2000, max(following_count, followers_count))
        
        print(f"\nüìã Coletando listas (m√°ximo {max_collect} usu√°rios cada)...")
        print("   ‚è≥ Este processo pode demorar alguns minutos...")
        
        # Coletar following
        following_data = scraper.get_following_list(max_users=max_collect)
        scraper.save_to_csv(following_data, 'following_selenium.csv')
        
        # Coletar followers
        followers_data = scraper.get_followers_list(max_users=max_collect)
        scraper.save_to_csv(followers_data, 'followers_selenium.csv')
        
        # Fechar navegador
        scraper.close()
        
        # Converter para formato compat√≠vel com o sistema existente
        following_usernames = {user['username'] for user in following_data}
        followers_usernames = {user['username'] for user in followers_data}
        
        # Encontrar quem n√£o te segue de volta
        non_followers = following_usernames - followers_usernames
        
        print(f"\nüìä RESULTADOS DA COLETA:")
        print(f"   ‚Ä¢ Coletados {len(following_data)} usu√°rios que voc√™ segue")
        print(f"   ‚Ä¢ Coletados {len(followers_data)} seus seguidores")
        print(f"   ‚Ä¢ {len(non_followers)} n√£o te seguem de volta")
        
        if not non_followers:
            print("\nüéâ RESULTADO: Todos os usu√°rios coletados te seguem de volta!")
            print("   Nenhum unfollow necess√°rio. Sistema finalizado.")
            return
        
        # ETAPA 2-5: Usar sistema existente para an√°lise e unfollow
        print(f"\nü§ñ ETAPA 2-5/5: Processando com sistema de IA...")
        
        # Inicializar sistema de unfollow
        unfollower = TwitterUnfollower(API_KEY, API_SECRET, ACCESS_TOKEN, ACCESS_TOKEN_SECRET, OPENROUTER_API_KEY)
        print(f"‚úÖ Sistema de unfollow autenticado como: @{unfollower.username}")
        
        # Converter usernames para user_ids (necess√°rio para a API)
        print("üîÑ Convertendo usernames para user_ids...")
        user_ids = unfollower.get_user_ids_from_usernames(list(non_followers))
        
        if not user_ids:
            print("‚ùå Erro ao converter usernames para IDs")
            return
        
        print(f"‚úÖ Convertidos {len(user_ids)} usernames para IDs")
        
        # Continuar com o processo normal de an√°lise e unfollow
        csv_filename = unfollower.save_non_followers_to_csv(user_ids)
        
        if not csv_filename:
            print("‚ùå ERRO: Falha ao salvar an√°lise em CSV")
            return
        
        print(f"‚úÖ An√°lise salva em: {csv_filename}")
        
        # Aplicar filtros de imunidade
        print(f"\nüõ°Ô∏è Aplicando filtros de imunidade...")
        filter_config = unfollower.create_smart_filter_config(aggressive=False)
        filtered_non_followers = unfollower.load_non_followers_from_csv(csv_filename, filter_config)
        
        print(f"‚úÖ Usu√°rios filtrados para unfollow: {len(filtered_non_followers)}")
        
        if not filtered_non_followers:
            print("\nüõ°Ô∏è RESULTADO: Todos os usu√°rios s√£o imunes!")
            print("   Nenhum unfollow ser√° realizado.")
            return
        
        # Salvar estado e iniciar sistema autom√°tico
        state = unfollower.load_state()
        state['non_followers'] = filtered_non_followers
        state['total_to_process'] = len(filtered_non_followers)
        state['processed_count'] = 0
        state['last_update'] = time.strftime('%Y-%m-%d %H:%M:%S')
        state['csv_filename'] = csv_filename
        state['filter_mode'] = 'selenium'
        unfollower.save_state(state)
        
        # Estimativa de tempo
        hours_estimated = len(filtered_non_followers) / 60  # 20 unfollows a cada 20 min = 60 por hora
        print(f"\n‚ö° SISTEMA AUTOM√ÅTICO CONFIGURADO:")
        print(f"   üìä Arquivo de an√°lise: {csv_filename}")
        print(f"   ‚è∞ Frequ√™ncia: 20 unfollows a cada 20 minutos")
        print(f"   ‚è±Ô∏è Tempo estimado total: {hours_estimated:.1f} horas")
        print(f"   üõë Para parar: Pressione Ctrl+C")
        
        print(f"\n{'='*70}")
        print("üö® ATEN√á√ÉO: O sistema iniciar√° em 10 segundos...")
        print("   Pressione Ctrl+C agora se quiser cancelar")
        print(f"{'='*70}")

        # Countdown
        for i in range(10, 0, -1):
            print(f"   Iniciando em {i}s...", end='\r')
            time.sleep(1)

        print("\nüöÄ INICIANDO SISTEMA AUTOM√ÅTICO...")
        print(f"{'='*70}")

        # Iniciar sistema autom√°tico
        unfollower.start_scheduled_unfollows(use_existing_csv=True)

    except KeyboardInterrupt:
        print("\n\nüõë SISTEMA INTERROMPIDO PELO USU√ÅRIO")
        print("   O progresso foi salvo automaticamente.")
        print("   Execute novamente para continuar de onde parou.")
    except Exception as e:
        logging.error(f"Erro cr√≠tico: {e}")
        print(f"\n‚ùå ERRO CR√çTICO: {e}")
        print("   Verifique o arquivo de log para mais detalhes.")

if __name__ == "__main__":
    main()
