#!/usr/bin/env python3
"""
Script otimizado para unfollow autom√°tico no Twitter/X - SELENIUM ONLY
Sequ√™ncia autom√°tica: Extrair ‚Üí Analisar ‚Üí Filtrar ‚Üí Unfollow
N√£o requer API do Twitter - funciona apenas com navegador
"""

import time
import logging
import os
import schedule
from datetime import datetime
from dotenv import load_dotenv
from twitter_selenium_only import TwitterSeleniumUnfollower

# Carregar vari√°veis de ambiente
load_dotenv()

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('twitter_selenium_auto.log'),
        logging.StreamHandler()
    ]
)

def run_unfollow_cycle():
    """
    Executa um ciclo de unfollow autom√°tico usando Selenium
    """
    try:
        logging.info("üîÑ Iniciando ciclo de unfollow autom√°tico (Selenium)...")

        # Carregar credencial OpenRouter
        openrouter_key = os.getenv('OPENROUTER_API_KEY')
        if not openrouter_key:
            logging.error("‚ùå OPENROUTER_API_KEY n√£o encontrada")
            return False

        # Inicializar sistema Selenium
        unfollower = TwitterSeleniumUnfollower(
            openrouter_api_key=openrouter_key,
            headless=True,  # Modo headless para execu√ß√£o autom√°tica
            browser="chrome"
        )

        # Executar processo com limites para ciclo autom√°tico
        results = unfollower.run_full_process(
            max_following=1000,  # Processar em lotes menores
            max_followers=1000,
            max_unfollows=20,    # 20 unfollows por ciclo
            delay_between=3.0    # 3 segundos entre unfollows
        )

        if results['success']:
            logging.info("‚úÖ Ciclo conclu√≠do com sucesso")
            if 'unfollow_results' in results.get('stats', {}):
                unfollow_stats = results['stats']['unfollow_results']
                logging.info(f"‚ö° Unfollows realizados: {unfollow_stats.get('success_count', 0)}")
            return True
        else:
            logging.error(f"‚ùå Ciclo falhou: {results['message']}")
            return False

    except Exception as e:
        logging.error(f"‚ùå Erro no ciclo: {e}")
        return False

def main():
    """
    Executa a sequ√™ncia autom√°tica completa de unfollow usando Selenium
    """
    # Verificar credencial OpenRouter
    openrouter_key = os.getenv('OPENROUTER_API_KEY')
    if not openrouter_key:
        print("‚ùå ERRO: OPENROUTER_API_KEY n√£o encontrada no arquivo .env")
        print("üí° Configure sua chave da OpenRouter no arquivo .env:")
        print("   OPENROUTER_API_KEY=sua_chave_aqui")
        return

    print(f"\n{'='*70}")
    print(f"ü§ñ TWITTER/X UNFOLLOW AUTOM√ÅTICO - SELENIUM ONLY")
    print(f"{'='*70}")
    print("üöÄ MODO AUTOM√ÅTICO:")
    print("   ‚Ä¢ Executa a cada 20 minutos")
    print("   ‚Ä¢ 20 unfollows por ciclo")
    print("   ‚Ä¢ An√°lise de IA para proteger devs/pesquisadores")
    print("   ‚Ä¢ Funciona apenas com navegador (sem API)")
    print("   ‚Ä¢ Pressione Ctrl+C para parar")
    print(f"{'='*70}")

    # Escolher modo
    print("\nüîß Escolha o modo de execu√ß√£o:")
    print("1. üîÑ Autom√°tico (a cada 20 minutos)")
    print("2. üöÄ Execu√ß√£o √∫nica completa")

    while True:
        choice = input("\nDigite sua escolha (1-2) [1]: ").strip()
        if choice == "" or choice == "1":
            mode = "automatic"
            break
        elif choice == "2":
            mode = "single"
            break
        else:
            print("‚ùå Op√ß√£o inv√°lida. Tente novamente.")

    try:
        if mode == "automatic":
            print("\n‚ö° MODO AUTOM√ÅTICO ATIVADO")
            print("üîÑ Executando primeiro ciclo...")

            # Executar primeiro ciclo
            run_unfollow_cycle()

            # Agendar execu√ß√µes autom√°ticas
            schedule.every(20).minutes.do(run_unfollow_cycle)

            print("\n‚è∞ Sistema agendado para executar a cada 20 minutos")
            print("üõë Pressione Ctrl+C para parar")

            while True:
                schedule.run_pending()
                time.sleep(60)  # Verificar a cada minuto

        else:  # single execution
            print("\nüöÄ MODO EXECU√á√ÉO √öNICA")

            # Inicializar sistema Selenium
            unfollower = TwitterSeleniumUnfollower(
                openrouter_api_key=openrouter_key,
                headless=False,  # Interface vis√≠vel para execu√ß√£o √∫nica
                browser="chrome"
            )

            # Executar processo completo
            results = unfollower.run_full_process(
                max_following=6000,  # Suporte para suas 5.268 pessoas
                max_followers=6000,
                max_unfollows=50,    # Mais unfollows em execu√ß√£o √∫nica
                delay_between=3.0
            )

        # ETAPA 1: Extrair listas
        print(f"\nüìã ETAPA 1/5: Extraindo listas do Twitter...")
        following = unfollower.get_following()
        followers = unfollower.get_followers()
        non_followers = unfollower.find_non_followers(following, followers)

        print(f"   üìä Estat√≠sticas:")
        print(f"      ‚Ä¢ Voc√™ segue: {len(following)} usu√°rios")
        print(f"      ‚Ä¢ Te seguem: {len(followers)} usu√°rios")
        print(f"      ‚Ä¢ N√£o te seguem de volta: {len(non_followers)} usu√°rios")

        if not non_followers:
            if len(following) == 0 and len(followers) == 0:
                print("\n‚ùå LIMITA√á√ÉO DA API DETECTADA!")
                print("   Sua conta Twitter API tem acesso limitado e n√£o pode acessar")
                print("   os endpoints de followers/following.")
                print("\nüí° SOLU√á√ïES DISPON√çVEIS:")
                print("   1. üí∞ Upgrade para Twitter API Pro ($100/m√™s)")
                print("   2. üìÅ Usar entrada manual de dados:")
                print("      ‚Ä¢ Exporte suas listas manualmente do Twitter")
                print("      ‚Ä¢ Salve como CSV com colunas: user_id, username")
                print("      ‚Ä¢ Use o modo manual do script")
                print("\nüìñ INSTRU√á√ïES PARA MODO MANUAL:")
                print("   python twitter_unfollow.py --manual")
                print("\nüìù FORMATO DO CSV:")
                print("   Crie dois arquivos CSV:")
                print("   ‚Ä¢ following.csv - usu√°rios que voc√™ segue")
                print("   ‚Ä¢ followers.csv - usu√°rios que te seguem")
                print("   Formato: user_id,username (uma linha por usu√°rio)")
                return
            else:
                print("\nüéâ RESULTADO: Todos os usu√°rios que voc√™ segue tamb√©m te seguem de volta!")
                print("   Nenhum unfollow necess√°rio. Sistema finalizado.")
                return

        # ETAPA 2-3: Analisar perfis e salvar CSV
        print(f"\nü§ñ ETAPA 2-3/5: Analisando {len(non_followers)} perfis com IA...")
        print("   ‚è≥ Este processo pode demorar alguns minutos...")
        
        csv_filename = unfollower.save_non_followers_to_csv(non_followers)

        if not csv_filename:
            print("‚ùå ERRO: Falha ao salvar an√°lise em CSV. Abortando processo.")
            return

        print(f"   ‚úÖ An√°lise salva em: {csv_filename}")

        # ETAPA 4: Filtrar usu√°rios imunes
        print(f"\nüõ°Ô∏è ETAPA 4/5: Aplicando filtros de imunidade...")
        filter_config = unfollower.create_smart_filter_config(aggressive=False)
        filtered_non_followers = unfollower.load_non_followers_from_csv(csv_filename, filter_config)

        # Salvar estado para sistema autom√°tico
        state = unfollower.load_state()
        state['non_followers'] = filtered_non_followers
        state['total_to_process'] = len(filtered_non_followers)
        state['processed_count'] = 0
        state['last_update'] = time.strftime('%Y-%m-%d %H:%M:%S')
        state['csv_filename'] = csv_filename
        state['filter_mode'] = 'normal'
        unfollower.save_state(state)

        print(f"   ‚úÖ Usu√°rios filtrados para unfollow: {len(filtered_non_followers)}")

        if not filtered_non_followers:
            print("\nüõ°Ô∏è RESULTADO: Todos os usu√°rios s√£o imunes!")
            print("   Nenhum unfollow ser√° realizado. Sistema finalizado.")
            return

        # ETAPA 5: Iniciar sistema autom√°tico
        print(f"\n‚ö° ETAPA 5/5: Configurando sistema autom√°tico...")
        print(f"   üìä Arquivo de an√°lise: {csv_filename}")
        print(f"   ‚è∞ Frequ√™ncia: 20 unfollows a cada 20 minutos")
        print(f"   üõë Para parar: Pressione Ctrl+C")
        print(f"   üìà Progresso ser√° salvo automaticamente")
        
        # Estimativa de tempo
        hours_estimated = len(filtered_non_followers) / 60  # 20 unfollows a cada 20 min = 60 por hora
        print(f"   ‚è±Ô∏è Tempo estimado total: {hours_estimated:.1f} horas")
        
        print(f"\n{'='*70}")
        print("üö® ATEN√á√ÉO: O sistema iniciar√° em 10 segundos...")
        print("   Pressione Ctrl+C agora se quiser cancelar")
        print(f"{'='*70}")

        # Countdown
        for i in range(10, 0, -1):
            print(f"   Iniciando em {i}s...", end='\r')
            time.sleep(1)

        print("\nüöÄ INICIANDO SISTEMA AUTOM√ÅTICO...")
        print(f"{'='*70}")

        # Iniciar sistema autom√°tico
        unfollower.start_scheduled_unfollows(use_existing_csv=True)

    except KeyboardInterrupt:
        print("\n\nüõë SISTEMA INTERROMPIDO PELO USU√ÅRIO")
        print("   O progresso foi salvo automaticamente.")
        print("   Execute novamente para continuar de onde parou.")
    except Exception as e:
        logging.error(f"Erro cr√≠tico: {e}")
        print(f"\n‚ùå ERRO CR√çTICO: {e}")
        print("   Verifique o arquivo de log para mais detalhes.")

if __name__ == "__main__":
    main()
