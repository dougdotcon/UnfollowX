#!/usr/bin/env python3
"""
Script de migra√ß√£o do sistema Selenium para o Sistema H√≠brido
Facilita a transi√ß√£o e preserva dados existentes
"""

import os
import json
import shutil
from datetime import datetime
from pathlib import Path

def backup_existing_data():
    """
    Faz backup dos dados existentes do sistema Selenium
    """
    print("üîÑ Fazendo backup dos dados existentes...")
    
    backup_dir = f"backup_selenium_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    os.makedirs(backup_dir, exist_ok=True)
    
    files_to_backup = [
        'selenium_unfollow_state.json',
        'twitter_selenium_only.log',
        'twitter_selenium_auto.log',
        'analysis_progress.json'
    ]
    
    csv_files = list(Path('.').glob('selenium_analysis_*.csv'))
    
    backed_up = []
    
    for file_path in files_to_backup:
        if os.path.exists(file_path):
            shutil.copy2(file_path, backup_dir)
            backed_up.append(file_path)
    
    for csv_file in csv_files:
        shutil.copy2(csv_file, backup_dir)
        backed_up.append(str(csv_file))
    
    if backed_up:
        print(f"‚úÖ Backup criado em: {backup_dir}")
        print(f"üìÅ Arquivos salvos: {len(backed_up)}")
        for file in backed_up:
            print(f"   - {file}")
    else:
        print("‚ÑπÔ∏è Nenhum arquivo de dados antigo encontrado")
    
    return backup_dir

def check_hybrid_dependencies():
    """
    Verifica se as depend√™ncias do sistema h√≠brido est√£o instaladas
    """
    print("\nüîç Verificando depend√™ncias do sistema h√≠brido...")
    
    try:
        import selenium
        print("‚úÖ Selenium instalado")
    except ImportError:
        print("‚ùå Selenium n√£o encontrado")
        return False
    
    try:
        from webdriver_manager.chrome import ChromeDriverManager
        print("‚úÖ WebDriver Manager instalado")
    except ImportError:
        print("‚ùå WebDriver Manager n√£o encontrado")
        return False
    
    try:
        import openai
        print("‚úÖ OpenAI instalado")
    except ImportError:
        print("‚ùå OpenAI n√£o encontrado")
        return False
    
    try:
        from dotenv import load_dotenv
        print("‚úÖ Python-dotenv instalado")
    except ImportError:
        print("‚ùå Python-dotenv n√£o encontrado")
        return False
    
    return True

def check_openrouter_config():
    """
    Verifica se a configura√ß√£o do OpenRouter est√° presente
    """
    print("\nüîë Verificando configura√ß√£o OpenRouter...")
    
    from dotenv import load_dotenv
    load_dotenv()
    
    openrouter_key = os.getenv('OPENROUTER_API_KEY')
    
    if openrouter_key:
        print("‚úÖ OPENROUTER_API_KEY encontrada no .env")
        return True
    else:
        print("‚ùå OPENROUTER_API_KEY n√£o encontrada")
        print("üí° Adicione sua chave no arquivo .env:")
        print("   OPENROUTER_API_KEY=sua_chave_aqui")
        return False

def migrate_state_data():
    """
    Migra dados de estado do sistema Selenium para o h√≠brido (se existir)
    """
    print("\nüìã Verificando dados de estado para migra√ß√£o...")
    
    selenium_state_file = 'selenium_unfollow_state.json'
    hybrid_state_file = 'hybrid_unfollow_state.json'
    
    if os.path.exists(selenium_state_file):
        try:
            with open(selenium_state_file, 'r', encoding='utf-8') as f:
                selenium_state = json.load(f)
            
            # Adaptar estrutura para sistema h√≠brido
            hybrid_state = {
                'migrated_from_selenium': True,
                'migration_date': datetime.now().isoformat(),
                'original_selenium_state': selenium_state,
                'hybrid_state': {
                    'last_execution': None,
                    'total_analyzed': selenium_state.get('analyzed_count', 0),
                    'total_unfollowed': selenium_state.get('total_unfollowed', 0)
                }
            }
            
            with open(hybrid_state_file, 'w', encoding='utf-8') as f:
                json.dump(hybrid_state, f, indent=2, ensure_ascii=False)
            
            print(f"‚úÖ Estado migrado para: {hybrid_state_file}")
            print(f"üìä Dados preservados:")
            print(f"   - Analisados: {selenium_state.get('analyzed_count', 0)}")
            print(f"   - Unfollows: {selenium_state.get('total_unfollowed', 0)}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro na migra√ß√£o do estado: {e}")
            print("‚ÑπÔ∏è O sistema h√≠brido funcionar√° normalmente sem os dados antigos")
    else:
        print("‚ÑπÔ∏è Nenhum estado anterior encontrado")

def setup_hybrid_config():
    """
    Configura arquivos de configura√ß√£o do sistema h√≠brido
    """
    print("\n‚öôÔ∏è Configurando sistema h√≠brido...")
    
    # Verificar se config exemplo existe
    if os.path.exists('config_hybrid_example.env'):
        print("‚úÖ Arquivo de configura√ß√£o exemplo encontrado")
        
        if not os.path.exists('.env'):
            print("üìù Criando arquivo .env baseado no exemplo...")
            shutil.copy2('config_hybrid_example.env', '.env')
            print("‚ö†Ô∏è IMPORTANTE: Edite o arquivo .env e configure sua OPENROUTER_API_KEY")
        else:
            print("‚ÑπÔ∏è Arquivo .env j√° existe")
    
    print("‚úÖ Configura√ß√£o do sistema h√≠brido conclu√≠da")

def test_hybrid_system():
    """
    Testa se o sistema h√≠brido pode ser inicializado
    """
    print("\nüß™ Testando sistema h√≠brido...")
    
    try:
        from twitter_hybrid_unfollow import TwitterHybridUnfollower
        from dotenv import load_dotenv
        
        load_dotenv()
        openrouter_key = os.getenv('OPENROUTER_API_KEY')
        
        if not openrouter_key:
            print("‚ùå Teste falhou: OPENROUTER_API_KEY n√£o configurada")
            return False
        
        # Teste de inicializa√ß√£o (sem executar)
        unfollower = TwitterHybridUnfollower(
            openrouter_api_key=openrouter_key,
            headless=True
        )
        
        print("‚úÖ Sistema h√≠brido inicializado com sucesso")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")
        return False

def main():
    """
    Executa a migra√ß√£o completa
    """
    print("="*70)
    print("üîÑ MIGRA√á√ÉO PARA SISTEMA H√çBRIDO")
    print("="*70)
    print("Este script ir√°:")
    print("1. Fazer backup dos dados existentes")
    print("2. Verificar depend√™ncias")
    print("3. Configurar sistema h√≠brido")
    print("4. Migrar dados de estado")
    print("5. Testar nova configura√ß√£o")
    print("="*70)
    
    confirm = input("\nDeseja continuar com a migra√ß√£o? [y/N]: ").strip().lower()
    if confirm not in ['y', 'yes', 's', 'sim']:
        print("üëã Migra√ß√£o cancelada")
        return
    
    # 1. Backup
    backup_dir = backup_existing_data()
    
    # 2. Verificar depend√™ncias
    if not check_hybrid_dependencies():
        print("\n‚ùå Depend√™ncias faltando. Execute:")
        print("pip install -r requirements.txt --force-reinstall")
        return
    
    # 3. Verificar OpenRouter
    openrouter_ok = check_openrouter_config()
    
    # 4. Configurar sistema
    setup_hybrid_config()
    
    # 5. Migrar estado
    migrate_state_data()
    
    # 6. Testar sistema
    if openrouter_ok:
        system_ok = test_hybrid_system()
    else:
        system_ok = False
    
    # Resultados finais
    print("\n" + "="*70)
    print("üìä RESULTADOS DA MIGRA√á√ÉO")
    print("="*70)
    
    if backup_dir:
        print(f"‚úÖ Backup criado: {backup_dir}")
    
    print("‚úÖ Depend√™ncias verificadas")
    
    if openrouter_ok and system_ok:
        print("‚úÖ Sistema h√≠brido configurado e testado")
        print("\nüöÄ PR√ìXIMOS PASSOS:")
        print("1. Execute o sistema h√≠brido:")
        print("   python main_hybrid.py")
        print("2. Ou configure execu√ß√£o autom√°tica:")
        print("   python twitter_hybrid_auto.py")
    else:
        print("‚ö†Ô∏è Configura√ß√£o incompleta")
        print("\nüîß A√á√ïES NECESS√ÅRIAS:")
        if not openrouter_ok:
            print("1. Configure OPENROUTER_API_KEY no arquivo .env")
        print("2. Execute novamente este script ap√≥s corrigir")
    
    print("\nüìö DOCUMENTA√á√ÉO:")
    print("- README.md atualizado com instru√ß√µes do sistema h√≠brido")
    print("- Se√ß√£o 'üÜï Sistema H√≠brido (RECOMENDADO)' no README")
    
    print("="*70)

if __name__ == "__main__":
    main()
