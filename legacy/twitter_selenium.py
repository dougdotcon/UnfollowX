#!/usr/bin/env python3
"""
Automa√ß√£o do Twitter/X usando Selenium para contornar limita√ß√µes da API
"""

import time
import logging
from typing import Set, Dict
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import TimeoutException
from webdriver_manager.chrome import ChromeDriverManager

class TwitterSeleniumScraper:
    def __init__(self, headless: bool = False, use_existing_profile: bool = True, browser: str = "chrome"):
        """
        Inicializa o scraper do Twitter usando Selenium

        Args:
            headless: Se True, executa o navegador em modo headless (sem interface)
            use_existing_profile: Se True, usa o perfil existente do navegador (j√° logado)
            browser: "chrome" ou "brave"
        """
        self.driver = None
        self.headless = headless
        self.use_existing_profile = use_existing_profile
        self.browser = browser.lower()
        self.logged_in = False
        self.username = None

        # Configurar logging
        logging.basicConfig(level=logging.INFO)
        self.logger = logging.getLogger(__name__)
        
    def setup_driver(self):
        """
        Configura e inicializa o driver do Chrome ou Brave
        """
        try:
            # Configura√ß√µes do navegador
            if self.browser == "brave":
                from selenium.webdriver.chrome.options import Options as BraveOptions
                options = BraveOptions()
                # Caminho t√≠pico do Brave no Windows
                brave_path = r"C:\Program Files\BraveSoftware\Brave-Browser\Application\brave.exe"
                options.binary_location = brave_path
            else:
                options = Options()

            if self.headless:
                options.add_argument("--headless")

            # Se usar perfil existente, configurar
            if self.use_existing_profile:
                import os

                if self.browser == "brave":
                    # Caminho do perfil do Brave
                    profile_path = os.path.expanduser(r"~\AppData\Local\BraveSoftware\Brave-Browser\User Data")
                    options.add_argument(f"--user-data-dir={profile_path}")
                    options.add_argument("--profile-directory=Default")
                else:
                    # Caminho do perfil do Chrome
                    profile_path = os.path.expanduser(r"~\AppData\Local\Google\Chrome\User Data")
                    options.add_argument(f"--user-data-dir={profile_path}")
                    options.add_argument("--profile-directory=Default")

                self.logger.info(f"üîß Usando perfil existente: {profile_path}")

            # Configura√ß√µes para melhor performance e estabilidade
            options.add_argument("--no-sandbox")
            options.add_argument("--disable-dev-shm-usage")
            options.add_argument("--disable-gpu")
            options.add_argument("--window-size=1920,1080")
            options.add_argument("--disable-blink-features=AutomationControlled")
            options.add_experimental_option("excludeSwitches", ["enable-automation"])
            options.add_experimental_option('useAutomationExtension', False)

            # Desabilitar notifica√ß√µes e popups
            prefs = {
                "profile.default_content_setting_values.notifications": 2,
                "profile.default_content_settings.popups": 0,
            }
            options.add_experimental_option("prefs", prefs)

            # Usar webdriver-manager para baixar automaticamente o driver
            if self.browser == "brave":
                # Para Brave, usar ChromeDriver (compat√≠vel)
                service = Service(ChromeDriverManager().install())
            else:
                service = Service(ChromeDriverManager().install())

            # Criar driver
            self.driver = webdriver.Chrome(service=service, options=options)
            self.driver.implicitly_wait(10)

            # Remover propriedades que indicam automa√ß√£o
            self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")

            browser_name = "Brave" if self.browser == "brave" else "Chrome"
            self.logger.info(f"‚úÖ Driver do {browser_name} configurado com sucesso")
            return True

        except Exception as e:
            self.logger.error(f"‚ùå Erro ao configurar driver: {e}")
            self.logger.error("üí° Dicas:")
            if self.browser == "brave":
                self.logger.error("   - Verifique se o Brave est√° instalado no caminho padr√£o")
                self.logger.error("   - Tente usar browser='chrome' se o Brave n√£o funcionar")
            else:
                self.logger.error("   - Verifique se o Chrome est√° instalado")
                self.logger.error("   - Feche todas as inst√¢ncias do Chrome antes de executar")
            return False
    
    def check_login_status(self) -> bool:
        """
        Verifica se j√° est√° logado no Twitter/X e obt√©m o username

        Returns:
            True se j√° estiver logado
        """
        try:
            self.logger.info("ÔøΩ Verificando status de login...")

            # Navegar para o Twitter
            self.driver.get("https://x.com/home")
            time.sleep(5)

            # Verificar se est√° na p√°gina home (indicativo de login)
            if "home" in self.driver.current_url:
                self.logger.info("‚úÖ J√° est√° logado!")

                # Tentar obter o username do perfil
                try:
                    # Clicar no menu do perfil para obter username
                    profile_button = WebDriverWait(self.driver, 10).until(
                        EC.element_to_be_clickable((By.CSS_SELECTOR, '[data-testid="SideNav_AccountSwitcher_Button"]'))
                    )
                    profile_button.click()
                    time.sleep(2)

                    # Extrair username do menu
                    username_element = self.driver.find_element(By.CSS_SELECTOR, '[data-testid="UserName"] span')
                    self.username = username_element.text.replace('@', '')

                    # Fechar menu clicando fora
                    self.driver.find_element(By.TAG_NAME, 'body').click()

                    self.logged_in = True
                    self.logger.info(f"üë§ Usu√°rio logado: @{self.username}")
                    return True

                except Exception as e:
                    self.logger.warning(f"N√£o foi poss√≠vel obter username: {e}")
                    # Mesmo assim, considerar como logado
                    self.logged_in = True
                    self.username = "unknown"
                    return True
            else:
                self.logger.error("‚ùå N√£o est√° logado - fa√ßa login manualmente no navegador")
                self.logger.error("üí° Abra o Twitter/X no seu navegador e fa√ßa login antes de executar o script")
                return False

        except Exception as e:
            self.logger.error(f"‚ùå Erro ao verificar login: {e}")
            return False
    
    def get_following_count(self) -> int:
        """
        Obt√©m o n√∫mero total de usu√°rios que voc√™ segue
        """
        try:
            # Navegar para o perfil
            self.driver.get(f"https://x.com/{self.username}")
            time.sleep(3)
            
            # Encontrar elemento com contagem de following
            following_element = self.driver.find_element(
                By.XPATH, '//a[contains(@href, "/following")]//span[contains(@class, "css-1jxf684")]'
            )
            
            following_text = following_element.text
            # Extrair n√∫mero (pode estar em formato como "1,234" ou "1.2K")
            following_count = self._parse_count(following_text)
            
            self.logger.info(f"üìä Voc√™ segue {following_count} usu√°rios")
            return following_count
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao obter contagem de following: {e}")
            return 0
    
    def get_followers_count(self) -> int:
        """
        Obt√©m o n√∫mero total de seguidores
        """
        try:
            # Navegar para o perfil se n√£o estiver l√°
            if not self.driver.current_url.endswith(f"/{self.username}"):
                self.driver.get(f"https://x.com/{self.username}")
                time.sleep(3)
            
            # Encontrar elemento com contagem de followers
            followers_element = self.driver.find_element(
                By.XPATH, '//a[contains(@href, "/verified_followers") or contains(@href, "/followers")]//span[contains(@class, "css-1jxf684")]'
            )
            
            followers_text = followers_element.text
            followers_count = self._parse_count(followers_text)
            
            self.logger.info(f"üìä Voc√™ tem {followers_count} seguidores")
            return followers_count
            
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao obter contagem de followers: {e}")
            return 0
    
    def _parse_count(self, count_text: str) -> int:
        """
        Converte texto de contagem (ex: "1.2K", "1,234") para n√∫mero inteiro
        """
        try:
            count_text = count_text.replace(",", "").replace(".", "")
            
            if "K" in count_text:
                return int(float(count_text.replace("K", "")) * 1000)
            elif "M" in count_text:
                return int(float(count_text.replace("M", "")) * 1000000)
            else:
                return int(count_text)
                
        except:
            return 0
    
    def get_following_list(self, max_users: int = 6000) -> Set[Dict]:
        """
        Obt√©m lista de usu√°rios que voc√™ segue

        Args:
            max_users: N√∫mero m√°ximo de usu√°rios para coletar

        Returns:
            Set com dicion√°rios contendo user_id, username, display_name
        """
        following_users = set()

        try:
            self.logger.info(f"üìã Coletando lista de usu√°rios que voc√™ segue (m√°x: {max_users})...")

            # Navegar para p√°gina de following
            self.driver.get(f"https://x.com/{self.username}/following")
            time.sleep(5)

            # Scroll e coleta de usu√°rios
            last_height = self.driver.execute_script("return document.body.scrollHeight")
            collected_count = 0

            while collected_count < max_users:
                # Encontrar todos os elementos de usu√°rio na p√°gina atual
                user_elements = self.driver.find_elements(
                    By.CSS_SELECTOR,
                    '[data-testid="UserCell"]'
                )

                for element in user_elements:
                    if collected_count >= max_users:
                        break

                    try:
                        # Extrair informa√ß√µes do usu√°rio
                        user_info = self._extract_user_info(element)
                        if user_info and user_info not in following_users:
                            following_users.add(user_info)
                            collected_count += 1

                            if collected_count % 50 == 0:
                                self.logger.info(f"   Coletados {collected_count} usu√°rios...")

                    except Exception as e:
                        self.logger.debug(f"Erro ao extrair usu√°rio: {e}")
                        continue

                # Scroll para carregar mais usu√°rios
                self.driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
                time.sleep(2)

                # Verificar se carregou mais conte√∫do
                new_height = self.driver.execute_script("return document.body.scrollHeight")
                if new_height == last_height:
                    self.logger.info("üìÑ Fim da lista alcan√ßado")
                    break
                last_height = new_height

            self.logger.info(f"‚úÖ Coletados {len(following_users)} usu√°rios que voc√™ segue")
            return following_users

        except Exception as e:
            self.logger.error(f"‚ùå Erro ao coletar lista de following: {e}")
            return following_users

    def get_followers_list(self, max_users: int = 1000) -> Set[Dict]:
        """
        Obt√©m lista de usu√°rios que te seguem

        Args:
            max_users: N√∫mero m√°ximo de usu√°rios para coletar

        Returns:
            Set com dicion√°rios contendo user_id, username, display_name
        """
        followers_users = set()

        try:
            self.logger.info(f"üìã Coletando lista de seus seguidores (m√°x: {max_users})...")

            # Navegar para p√°gina de followers
            self.driver.get(f"https://x.com/{self.username}/verified_followers")
            time.sleep(5)

            # Se n√£o conseguir acessar verified_followers, tentar followers normal
            if "verified_followers" not in self.driver.current_url:
                self.driver.get(f"https://x.com/{self.username}/followers")
                time.sleep(5)

            # Scroll e coleta de usu√°rios
            last_height = self.driver.execute_script("return document.body.scrollHeight")
            collected_count = 0

            while collected_count < max_users:
                # Encontrar todos os elementos de usu√°rio na p√°gina atual
                user_elements = self.driver.find_elements(
                    By.CSS_SELECTOR,
                    '[data-testid="UserCell"]'
                )

                for element in user_elements:
                    if collected_count >= max_users:
                        break

                    try:
                        # Extrair informa√ß√µes do usu√°rio
                        user_info = self._extract_user_info(element)
                        if user_info and user_info not in followers_users:
                            followers_users.add(user_info)
                            collected_count += 1

                            if collected_count % 50 == 0:
                                self.logger.info(f"   Coletados {collected_count} seguidores...")

                    except Exception as e:
                        self.logger.debug(f"Erro ao extrair seguidor: {e}")
                        continue

                # Scroll para carregar mais usu√°rios
                self.driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
                time.sleep(2)

                # Verificar se carregou mais conte√∫do
                new_height = self.driver.execute_script("return document.body.scrollHeight")
                if new_height == last_height:
                    self.logger.info("üìÑ Fim da lista alcan√ßado")
                    break
                last_height = new_height

            self.logger.info(f"‚úÖ Coletados {len(followers_users)} seguidores")
            return followers_users

        except Exception as e:
            self.logger.error(f"‚ùå Erro ao coletar lista de followers: {e}")
            return followers_users

    def _extract_user_info(self, element) -> Dict:
        """
        Extrai informa√ß√µes de um elemento de usu√°rio

        Returns:
            Dicion√°rio com user_id, username, display_name
        """
        try:
            # Extrair username do link do perfil
            profile_link = element.find_element(By.CSS_SELECTOR, 'a[role="link"]')
            href = profile_link.get_attribute('href')
            username = href.split('/')[-1] if href else None

            # Extrair display name
            display_name_element = element.find_element(
                By.CSS_SELECTOR,
                '[data-testid="UserName"] span'
            )
            display_name = display_name_element.text

            # Para user_id, vamos usar o username como identificador √∫nico por enquanto
            # (o Twitter n√£o exp√µe facilmente o user_id num√©rico via scraping)
            user_id = username

            if username and display_name:
                return {
                    'user_id': user_id,
                    'username': username,
                    'display_name': display_name
                }

        except Exception as e:
            self.logger.debug(f"Erro ao extrair info do usu√°rio: {e}")

        return None

    def save_to_csv(self, users_data: Set[Dict], filename: str):
        """
        Salva dados dos usu√°rios em arquivo CSV
        """
        try:
            import csv

            with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
                fieldnames = ['user_id', 'username', 'display_name']
                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)

                writer.writeheader()
                for user in users_data:
                    writer.writerow(user)

            self.logger.info(f"üíæ Dados salvos em {filename}")

        except Exception as e:
            self.logger.error(f"‚ùå Erro ao salvar CSV: {e}")

    def unfollow_user_by_username(self, username: str, delay: float = 3.0) -> bool:
        """
        Para de seguir um usu√°rio espec√≠fico usando Selenium

        Args:
            username: Nome de usu√°rio (sem @)
            delay: Tempo de espera ap√≥s a a√ß√£o (segundos)

        Returns:
            True se o unfollow foi bem-sucedido
        """
        try:
            self.logger.info(f"üîÑ Tentando dar unfollow em @{username}")

            # Navegar para o perfil do usu√°rio
            profile_url = f"https://x.com/{username}"
            self.driver.get(profile_url)
            time.sleep(2)

            # Procurar pelo bot√£o "Following" ou "Seguindo"
            following_button = None

            # Tentar diferentes seletores para o bot√£o de following
            selectors = [
                '//div[@data-testid="placementTracking"]//span[text()="Following"]/..',
                '//div[@data-testid="placementTracking"]//span[text()="Seguindo"]/..',
                '//button[contains(@aria-label, "Following")]',
                '//button[contains(@aria-label, "Seguindo")]',
                '//div[contains(@aria-label, "Following")]',
                '//div[contains(@aria-label, "Seguindo")]'
            ]

            for selector in selectors:
                try:
                    following_button = WebDriverWait(self.driver, 5).until(
                        EC.element_to_be_clickable((By.XPATH, selector))
                    )
                    break
                except TimeoutException:
                    continue

            if not following_button:
                self.logger.warning(f"‚ö†Ô∏è Bot√£o 'Following' n√£o encontrado para @{username}")
                return False

            # Clicar no bot√£o Following
            following_button.click()
            time.sleep(1)

            # Procurar pelo bot√£o de confirma√ß√£o "Unfollow"
            unfollow_selectors = [
                '//div[@data-testid="confirmationSheetConfirm"]',
                '//button[contains(text(), "Unfollow")]',
                '//button[contains(text(), "Deixar de seguir")]',
                '//span[text()="Unfollow"]/..',
                '//span[text()="Deixar de seguir"]/..'
            ]

            unfollow_button = None
            for selector in unfollow_selectors:
                try:
                    unfollow_button = WebDriverWait(self.driver, 3).until(
                        EC.element_to_be_clickable((By.XPATH, selector))
                    )
                    break
                except TimeoutException:
                    continue

            if unfollow_button:
                unfollow_button.click()
                time.sleep(delay)
                self.logger.info(f"‚úÖ Unfollow realizado com sucesso: @{username}")
                return True
            else:
                self.logger.warning(f"‚ö†Ô∏è Bot√£o de confirma√ß√£o n√£o encontrado para @{username}")
                return False

        except Exception as e:
            self.logger.error(f"‚ùå Erro ao dar unfollow em @{username}: {e}")
            return False

    def unfollow_users_batch(self, usernames: list, delay_between: float = 5.0, max_per_session: int = 20) -> dict:
        """
        Realiza unfollow em lote de m√∫ltiplos usu√°rios

        Args:
            usernames: Lista de usernames para dar unfollow
            delay_between: Tempo de espera entre cada unfollow (segundos)
            max_per_session: M√°ximo de unfollows por sess√£o

        Returns:
            Dicion√°rio com estat√≠sticas da opera√ß√£o
        """
        results = {
            'success': [],
            'failed': [],
            'total_processed': 0,
            'success_count': 0,
            'failed_count': 0
        }

        # Limitar quantidade por sess√£o
        users_to_process = usernames[:max_per_session]

        self.logger.info(f"üöÄ Iniciando unfollow em lote: {len(users_to_process)} usu√°rios")

        for i, username in enumerate(users_to_process, 1):
            self.logger.info(f"üìã Processando {i}/{len(users_to_process)}: @{username}")

            success = self.unfollow_user_by_username(username, delay=2.0)

            if success:
                results['success'].append(username)
                results['success_count'] += 1
            else:
                results['failed'].append(username)
                results['failed_count'] += 1

            results['total_processed'] += 1

            # Delay entre unfollows (exceto no √∫ltimo)
            if i < len(users_to_process):
                self.logger.info(f"‚è≥ Aguardando {delay_between}s antes do pr√≥ximo...")
                time.sleep(delay_between)

        # Log final
        self.logger.info(f"üìä RESULTADO DO LOTE:")
        self.logger.info(f"   ‚úÖ Sucessos: {results['success_count']}")
        self.logger.info(f"   ‚ùå Falhas: {results['failed_count']}")
        self.logger.info(f"   üìã Total: {results['total_processed']}")

        return results

    def verify_unfollow_status(self, username: str) -> bool:
        """
        Verifica se ainda est√° seguindo um usu√°rio espec√≠fico

        Args:
            username: Nome de usu√°rio para verificar

        Returns:
            True se ainda est√° seguindo, False se n√£o est√° mais seguindo
        """
        try:
            profile_url = f"https://x.com/{username}"
            self.driver.get(profile_url)
            time.sleep(2)

            # Procurar por bot√£o "Follow" (indica que n√£o est√° mais seguindo)
            follow_selectors = [
                '//div[@data-testid="placementTracking"]//span[text()="Follow"]',
                '//div[@data-testid="placementTracking"]//span[text()="Seguir"]',
                '//button[contains(@aria-label, "Follow")]',
                '//button[contains(@aria-label, "Seguir")]'
            ]

            for selector in follow_selectors:
                try:
                    WebDriverWait(self.driver, 3).until(
                        EC.presence_of_element_located((By.XPATH, selector))
                    )
                    return False  # N√£o est√° mais seguindo
                except TimeoutException:
                    continue

            return True  # Ainda est√° seguindo

        except Exception as e:
            self.logger.error(f"‚ùå Erro ao verificar status de @{username}: {e}")
            return True  # Assumir que ainda est√° seguindo em caso de erro

    def close(self):
        """
        Fecha o navegador
        """
        if self.driver:
            self.driver.quit()
            self.logger.info("üîí Navegador fechado")
