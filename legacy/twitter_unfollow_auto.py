#!/usr/bin/env python3
"""
Script otimizado para unfollow autom√°tico no Twitter/X - SELENIUM ONLY
Sequ√™ncia autom√°tica: Extrair ‚Üí Analisar ‚Üí Filtrar ‚Üí Unfollow
N√£o requer API do Twitter - funciona apenas com navegador
"""

import time
import logging
import os
import schedule
from datetime import datetime
from dotenv import load_dotenv
from twitter_selenium_only import TwitterSeleniumUnfollower

# Carregar vari√°veis de ambiente
load_dotenv()

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('twitter_selenium_auto.log'),
        logging.StreamHandler()
    ]
)

def run_unfollow_cycle():
    """
    Executa um ciclo de unfollow autom√°tico usando Selenium
    """
    try:
        logging.info("üîÑ Iniciando ciclo de unfollow autom√°tico (Selenium)...")

        # Carregar credencial OpenRouter
        openrouter_key = os.getenv('OPENROUTER_API_KEY')
        if not openrouter_key:
            logging.error("‚ùå OPENROUTER_API_KEY n√£o encontrada")
            return False

        # Inicializar sistema Selenium
        unfollower = TwitterSeleniumUnfollower(
            openrouter_api_key=openrouter_key,
            headless=True,  # Modo headless para execu√ß√£o autom√°tica
            browser="chrome"
        )

        # Executar processo com limites para ciclo autom√°tico
        results = unfollower.run_full_process(
            max_following=1000,  # Processar em lotes menores
            max_followers=1000,
            max_unfollows=20,    # 20 unfollows por ciclo
            delay_between=3.0    # 3 segundos entre unfollows
        )

        if results['success']:
            logging.info("‚úÖ Ciclo conclu√≠do com sucesso")
            if 'unfollow_results' in results.get('stats', {}):
                unfollow_stats = results['stats']['unfollow_results']
                logging.info(f"‚ö° Unfollows realizados: {unfollow_stats.get('success_count', 0)}")
            return True
        else:
            logging.error(f"‚ùå Ciclo falhou: {results['message']}")
            return False

    except Exception as e:
        logging.error(f"‚ùå Erro no ciclo: {e}")
        return False

def main():
    """
    Executa a sequ√™ncia autom√°tica completa de unfollow usando Selenium
    """
    # Verificar credencial OpenRouter
    openrouter_key = os.getenv('OPENROUTER_API_KEY')
    if not openrouter_key:
        print("‚ùå ERRO: OPENROUTER_API_KEY n√£o encontrada no arquivo .env")
        print("üí° Configure sua chave da OpenRouter no arquivo .env:")
        print("   OPENROUTER_API_KEY=sua_chave_aqui")
        return

    print(f"\n{'='*70}")
    print(f"ü§ñ TWITTER/X UNFOLLOW AUTOM√ÅTICO - SELENIUM ONLY")
    print(f"{'='*70}")
    print("üöÄ MODO AUTOM√ÅTICO:")
    print("   ‚Ä¢ Executa a cada 20 minutos")
    print("   ‚Ä¢ 20 unfollows por ciclo")
    print("   ‚Ä¢ An√°lise de IA para proteger devs/pesquisadores")
    print("   ‚Ä¢ Funciona apenas com navegador (sem API)")
    print("   ‚Ä¢ Pressione Ctrl+C para parar")
    print(f"{'='*70}")

    # Escolher modo
    print("\nüîß Escolha o modo de execu√ß√£o:")
    print("1. üîÑ Autom√°tico (a cada 20 minutos)")
    print("2. üöÄ Execu√ß√£o √∫nica completa")

    while True:
        choice = input("\nDigite sua escolha (1-2) [1]: ").strip()
        if choice == "" or choice == "1":
            mode = "automatic"
            break
        elif choice == "2":
            mode = "single"
            break
        else:
            print("‚ùå Op√ß√£o inv√°lida. Tente novamente.")

    try:
        if mode == "automatic":
            print("\n‚ö° MODO AUTOM√ÅTICO ATIVADO")
            print("üîÑ Executando primeiro ciclo...")

            # Executar primeiro ciclo
            run_unfollow_cycle()

            # Agendar execu√ß√µes autom√°ticas
            schedule.every(20).minutes.do(run_unfollow_cycle)

            print("\n‚è∞ Sistema agendado para executar a cada 20 minutos")
            print("üõë Pressione Ctrl+C para parar")

            while True:
                schedule.run_pending()
                time.sleep(60)  # Verificar a cada minuto

        else:  # single execution
            print("\nüöÄ MODO EXECU√á√ÉO √öNICA")

            # Inicializar sistema Selenium
            unfollower = TwitterSeleniumUnfollower(
                openrouter_api_key=openrouter_key,
                headless=False,  # Interface vis√≠vel para execu√ß√£o √∫nica
                browser="chrome"
            )

            # Executar processo completo
            results = unfollower.run_full_process(
                max_following=6000,  # Suporte para suas 5.268 pessoas
                max_followers=6000,
                max_unfollows=50,    # Mais unfollows em execu√ß√£o √∫nica
                delay_between=3.0
            )

            # Mostrar resultados
            if results['success']:
                print("\n‚úÖ Processo conclu√≠do com sucesso!")
                if 'stats' in results:
                    stats = results['stats']
                    print(f"üìä Estat√≠sticas:")
                    print(f"   üì§ Following: {stats.get('following_count', 0)}")
                    print(f"   üì• Followers: {stats.get('followers_count', 0)}")
                    print(f"   üéØ N√£o-seguidores: {stats.get('non_followers_count', 0)}")
                    print(f"   ü§ñ Analisados: {stats.get('analyzed_count', 0)}")
                    print(f"   ‚ö° Unfollows: {stats.get('unfollow_results', {}).get('success_count', 0)}")
                if results.get('csv_file'):
                    print(f"üíæ An√°lise salva em: {results['csv_file']}")
            else:
                print(f"‚ùå Processo falhou: {results['message']}")

    except KeyboardInterrupt:
        print("\n\nüõë SISTEMA INTERROMPIDO PELO USU√ÅRIO")
        print("   O progresso foi salvo automaticamente.")
        print("   Execute novamente para continuar de onde parou.")
    except Exception as e:
        logging.error(f"Erro cr√≠tico: {e}")
        print(f"\n‚ùå ERRO CR√çTICO: {e}")
        print("   Verifique o arquivo de log para mais detalhes.")

if __name__ == "__main__":
    main()
